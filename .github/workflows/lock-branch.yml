name: Lock Main/Master Branch

on:
  workflow_dispatch:

jobs:
  lock-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Lock the branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GHA_PAT_TOKEN }}
          script: |
            const branchName = context.ref.replace('refs/heads/', '');
            if (branchName === 'main' || branchName === 'master') {
              try {
                const { data: protection } = await github.rest.repos.getBranchProtection({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: branchName
                });

                if (protection.lock_branch.enabled == true) {
                  console.log(`Branch ${branchName} is already locked.`);
                  return null;
                }

                // Remove unnecessary URLs from the protection object
                delete protection.url;
                if (protection.required_status_checks) {
                  delete protection.required_status_checks.url;
                  delete protection.required_status_checks.contexts_url;
                }
                if (protection.required_pull_request_reviews) {
                  delete protection.required_pull_request_reviews.url;
                }
                if (protection.required_signatures) {
                  delete protection.required_signatures.url;
                }
                if (protection.enforce_admins) {
                  delete protection.enforce_admins.url;
                }

                // Prepare the updated protection object
                const statusChecksContext = protection.required_status_checks?.contexts || [];
                const statusChecks = protection.required_status_checks?.checks || [];
                var requiredStatusChecks = null;
                if (statusChecksContext.length > 0 || statusChecks.length > 0) {
                  requiredStatusChecks = {
                    strict: protection.required_status_checks?.strict || false,
                    contexts: statusChecksContext,
                    checks: statusChecks
                  };
                }

                const updatedProtection = {
                  required_status_checks: requiredStatusChecks,
                  enforce_admins: protection.enforce_admins?.enabled || false,
                  required_pull_request_reviews: protection.required_pull_request_reviews || null,
                  restrictions: protection.restrictions || null,
                  required_linear_history: protection.required_linear_history?.enabled || false,
                  allow_force_pushes: protection.allow_force_pushes?.enabled || false,
                  allow_deletions: protection.allow_deletions?.enabled || false,
                  block_creations: protection.block_creations?.enabled || false,
                  required_conversation_resolution: protection.required_conversation_resolution?.enabled || false,
                  lock_branch: true, // Lock the branch
                  allow_fork_syncing: protection.allow_fork_syncing?.enabled || false
                };

                // Update the branch protection settings
                await github.rest.repos.updateBranchProtection({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: branchName,
                  ...updatedProtection
                });

                console.log('Branch locked:', branchName);
              } catch (error) {
                if (error.status === 404) {
                  throw new Error(`Branch protection rules for ${branchName} do not exist.`);
                } else {
                  throw error;
                }
              }
            } else {
              console.log('Branch not locked as it is not main or master:', branchName);
            }
